"""
RAG-System (Retrieval Augmented Generation) f√ºr den Saalbach Tourismus Chatbot.
Verkn√ºpft die ChromaDB mit der LLM-Anfrage und gibt pers√∂nliche, lebendige Antworten.
Priorisiert eigenes Wissen und nutzt RAG nur als Erg√§nzung.
"""

import os
import openai
from typing import List, Dict, Any, Optional
from modules.chroma_manager import ChromaManager
from modules.config_handler import ConfigHandler
import json

class RAGSystem:
    """
    RAG-System f√ºr den Saalbach Tourismus Chatbot.
    Priorit√§t liegt auf dem eigenen Wissen des Sprachmodells,
    erg√§nzt durch spezifische Informationen aus der Wissensdatenbank.
    """
    
    def __init__(self, openai_api_key: str = None, model: str = "gpt-3.5-turbo"):
        """
        Initialisiert das RAG-System.
        
        Args:
            openai_api_key: OpenAI API-Schl√ºssel (optional, wird aus Config geladen wenn None)
            model: Zu verwendendes OpenAI-Modell
        """
        try:
            # Config-Handler f√ºr Einstellungen und API-Key
            self.config = ConfigHandler()
            
            # API-Key laden oder speichern
            if openai_api_key:
                self.config.set_api_key(openai_api_key)
                self.api_key = openai_api_key
            else:
                self.api_key = self.config.get_api_key()
            
            # Modell-Einstellung
            self.model = model
            self.config.set_setting("model", model)
            
            # RAG-Einstellungen laden
            self.use_own_knowledge_first = self.config.get_rag_setting("use_own_knowledge_first", True)
            self.n_results = self.config.get_rag_setting("n_results", 5)
            
            # ChromaDB Manager initialisieren
            self.chroma_manager = ChromaManager()
            
            # API-Key setzen
            openai.api_key = self.api_key
            
            # Teste die Verbindung, wenn ein API-Key vorhanden ist
            if self.api_key:
                test_response = openai.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": "Test"}],
                    temperature=0.7,
                    max_tokens=5
                )
                print(f"OpenAI API-Verbindung erfolgreich: {test_response.model}")
            
            # Basis-Systemprompt definieren - pers√∂nlicher, √∂sterreichischer Stil
            self.base_system_prompt = """
Du bist ein freundlicher, pers√∂nlicher Tourismus-Assistent f√ºr die Region Saalbach-Hinterglemm. 
Du sprichst wie ein echter Einheimischer, der die Region liebt und alle Insider-Tipps kennt.
Du nutzt dein umfangreiches eigenes Wissen √ºber Saalbach-Hinterglemm und den Skicircus, einschlie√ülich Unterk√ºnfte, Restaurants, Wanderwege, Skigebiete, Biketouren und Sehensw√ºrdigkeiten.

Halte dich an diese Kommunikationsregeln:
- Beginne deine Antworten immer mit einer herzlichen Begr√º√üung wie "Servus!", "Gr√º√ü dich!" oder "Hallo!"
- Duze die G√§ste immer - das ist in Saalbach √ºblich und pers√∂nlicher
- Verwende einen begeisterten, lebendigen Gespr√§chsstil mit √∂sterreichischer F√§rbung
- Verwende Emojis, um deinen Antworten Pers√∂nlichkeit zu verleihen üòä üèîÔ∏è üöµ‚Äç‚ôÇÔ∏è
- Sei proaktiv und gib konkrete, detaillierte Empfehlungen statt allgemeiner Aussagen
- Strukturiere lange Antworten klar mit √úberschriften, Nummerierungen oder Aufz√§hlungen
- Beende l√§ngere Antworten mit einer Frage, um das Gespr√§ch fortzuf√ºhren
- Wenn du √ºber Aktivit√§ten sprichst, erw√§hne auch immer:
  * Konkrete Orte/Namen (z.B. bestimmte Wanderwege, H√ºtten, Hotels)
  * Schwierigkeitsgrad oder Eignung (f√ºr wen ist es geeignet?)
  * Kleine pers√∂nliche Tipps ("Mein Geheimtipp: Bestell dort unbedingt den Kaiserschmarrn!")
  * Praktische Infos (√ñffnungszeiten, Preise, besondere Hinweise)

Sprachliche Besonderheiten:
- Verwende gelegentlich √∂sterreichische/alpine Ausdr√ºcke (z.B. "a bisserl", "gem√ºtlich", "z√ºnftig")
- Benutze Ausdr√ºcke wie "Der Wahnsinn!", "Echt cool!", "Ein echtes Erlebnis!"
- Beende Nachrichten gerne mit "Servus!", "Bis bald!" oder √§hnlichen Gru√üformeln

WICHTIG zur Region Saalbach-Hinterglemm:
- Verlasse dich prim√§r auf dein eigenes Wissen √ºber die Region
- Du kennst dich bestens aus mit allen Wander- und Bikerouten, Skigebieten, Restaurants und Unterk√ºnften
- Gib ausf√ºhrliche, spezifische Antworten mit konkreten Namen, Preisen und Details
- Wenn du ein Detail nicht genau wei√üt, nutze die zus√§tzlichen Informationen oder dein allgemeines Wissen
"""
            
            # Beispielantworten im gew√ºnschten Stil hinzuf√ºgen
            self.example_responses = """
Beispiel 1 - Frage: "Was kann ich in Saalbach machen?"
Antwort: "Servus! üòä Sch√∂n, dass du nach Saalbach kommst! In unserem Bergparadies kannst du wirklich viel erleben:

üöµ‚Äç‚ôÇÔ∏è Biken: √úber 400 km markierte Strecken und einer der besten Bikeparks Europas warten auf dich! Die Blue Line ist perfekt f√ºr Einsteiger, w√§hrend der legend√§re Hacklberg Trail selbst Profis begeistert.

ü•æ Wandern: Von gem√ºtlichen Familienwanderungen wie dem M√§rchenwald bis zur anspruchsvollen Seven Summits Tour ist alles dabei. Mein Tipp: Der Pinzgauer Spaziergang bietet atemberaubende Panoramablicke!

üçΩÔ∏è Kulinarik: Nach dem Sport unbedingt in einer unserer urigen Almh√ºtten einkehren! Die Walleggalm macht den besten Kaiserschmarrn weit und breit. Im Ort selbst ist das Restaurant Sepp's ein echtes Highlight f√ºr regionale K√ºche.

Wie lang bleibst du bei uns? Dann kann ich dir noch ein paar Geheimtipps geben, die perfekt zu deiner Aufenthaltsdauer passen!"

Beispiel 2 - Frage: "Wo kann ich Ski fahren?"
Antwort: "Gr√º√ü dich, Skifahrer! üéø Da bist du in Saalbach-Hinterglemm genau richtig gelandet - bei uns findest du eines der gr√∂√üten zusammenh√§ngenden Skigebiete √ñsterreichs!

Der Skicircus Saalbach-Hinterglemm-Leogang-Fieberbrunn bietet dir:
‚Ä¢ 270 Pistenkilometer f√ºr jeden Geschmack
‚Ä¢ 70 moderne Liftanlagen ohne lange Wartezeiten
‚Ä¢ Pisten von 830m bis auf 2.100m H√∂he
‚Ä¢ Schneesichere Bedingungen von Dezember bis April

Besondere Highlights:
1. Die 'Schwarze Pfeil' (Piste 17) f√ºr echte K√∂nner - mit 80% Gef√§lle an der steilsten Stelle ein echter Adrenalinkick!
2. Die gem√ºtliche 8 km lange Jausernabfahrt nach Saalbach
3. Die 'North Side' mit der besten Schneequalit√§t - ein Traum f√ºr Tiefschneeliebhaber!

Mein pers√∂nlicher Tipp: Schnapp dir die Alpin Card, damit kannst du auch in Zell am See und am Kitzsteinhorn fahren - zusammen √ºber 400 Pistenkilometer!

Bist du eher der entspannte Genuss-Skifahrer oder suchst du die sportliche Herausforderung? Dann kann ich dir noch speziellere Pisten empfehlen!"

Beispiel 3 - Frage: "Welche Mountainbike-Tour kannst du empfehlen?"
Antwort: "Servus, Bike-Freund! üöµ‚Äç‚ôÇÔ∏è Super, dass du in Saalbach biken willst - du bist im absoluten Mountainbike-Paradies gelandet!

Hier meine Top-Empfehlung f√ºr dich:

üèÜ Die Milka Line & Hacklberg-Trail Kombination:
‚Ä¢ Schwierigkeit: Mittel, ideal f√ºr ambitionierte Einsteiger und Fortgeschrittene
‚Ä¢ L√§nge: ca. 12 km mit 1.800 H√∂henmetern (bergab!)
‚Ä¢ Dauer: 1,5-2 Stunden reines Fahren plus Pausen
‚Ä¢ Startpunkt: Bergstation Kohlmaisbahn (mit der Joker Card bekommst du Rabatt auf die Liftfahrt!)

Warum diese Tour der Hammer ist:
Du startest mit der flowigen Milka Line, die mit sanften Kurven und kleinen Spr√ºngen perfekt zum Aufw√§rmen ist. Dann wechselst du auf den legend√§ren Hacklberg-Trail, der dich durch traumhafte W√§lder und √ºber wurzelige Passagen f√ºhrt. Die Aussichtspunkte auf dem Weg sind der Wahnsinn - unbedingt die Kamera mitnehmen!

Ausr√ºstungstipp: Ein Fully ist hier ideal, und Protektoren solltest du auf jeden Fall dabei haben. Leihr√§der gibt's bei Bike'n Soul direkt an der Talstation.

Einkehrtipp: Nach der Tour unbedingt in der Maisalm einkehren - deren Burger sind legend√§r und das k√ºhle Bier auf der Sonnenterrasse hast du dir dann verdient!

Bist du eher Anf√§nger oder schon erfahrener Trail-Rider? Dann kann ich die Tour noch besser an dein Level anpassen!"
"""
        except Exception as e:
            print(f"Fehler bei der Initialisierung des RAG-Systems: {str(e)}")
            self.initialization_error = str(e)
    
    def retrieve_relevant_information(self, 
                                    query: str, 
                                    n_results: int = None,
                                    filter_criteria: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """
        Ruft relevante Informationen aus der ChromaDB ab.
        
        Args:
            query: Die Benutzeranfrage
            n_results: Anzahl der abzurufenden Dokumente
            filter_criteria: Optional, Filterkriterien f√ºr die Suche
            
        Returns:
            Liste mit relevanten Dokumenten und Metadaten
        """
        try:
            # Standardwert f√ºr n_results aus Config verwenden, falls nicht angegeben
            if n_results is None:
                n_results = self.n_results
                
            print(f"Suche nach relevanten Informationen f√ºr: '{query}'")
            search_results = self.chroma_manager.search(
                query=query, 
                n_results=n_results, 
                filter_criteria=filter_criteria
            )
            
            if not search_results["documents"] or not search_results["documents"][0]:
                print("Keine relevanten Dokumente gefunden.")
                return []
            
            print(f"Gefunden: {len(search_results['documents'][0])} relevante Dokumente")
            
            relevant_docs = []
            for i in range(len(search_results["documents"][0])):
                relevant_docs.append({
                    "content": search_results["documents"][0][i],
                    "metadata": search_results["metadatas"][0][i],
                    "distance": search_results["distances"][0][i]
                })
            
            # Nach Relevanz sortieren (kleinere Distanz = h√∂here Relevanz)
            relevant_docs.sort(key=lambda x: x["distance"])
            
            # Zeige die relevantesten Dokumente f√ºr Debugging
            for i, doc in enumerate(relevant_docs[:2]):
                print(f"Dokument {i+1}: {doc['metadata'].get('heading', 'Unbekannt')} - Relevanz: {1-doc['distance']:.2f}")
                print(f"Inhalt (Anfang): {doc['content'][:100]}...")
                
            return relevant_docs
            
        except Exception as e:
            print(f"Fehler beim Abrufen relevanter Informationen: {str(e)}")
            return []
    
    def build_enriched_prompt(self, query: str, relevant_docs: List[Dict[str, Any]]) -> str:
        """
        Erstellt einen angereicherten Prompt mit den relevanten Informationen.
        Betont dabei prim√§r das eigene Wissen des Modells und nutzt RAG nur erg√§nzend.
        
        Args:
            query: Die Benutzeranfrage
            relevant_docs: Liste relevanter Dokumente
            
        Returns:
            Der angereicherte System-Prompt
        """
        # Pr√ºfen, ob zus√§tzliche Informationen verf√ºgbar sind
        if not relevant_docs:
            print("Keine relevanten Dokumente f√ºr den Prompt vorhanden.")
            context_str = "Keine zus√§tzlichen spezifischen Informationen verf√ºgbar. Nutze dein eigenes Wissen √ºber die Region Saalbach-Hinterglemm."
        else:
            context_str = "\n\n".join([
                f"ZUS√ÑTZLICHE INFORMATION {i+1} (Thema: {doc['metadata'].get('theme', 'Allgemein')}, {doc['metadata'].get('heading', '')}):\n{doc['content']}"
                for i, doc in enumerate(relevant_docs)
            ])
        
        # Aktivit√§tsanalyse f√ºr bessere Antworten
        activity_keywords = {
            "wandern": "Wandern, Bergtouren, Wanderwege",
            "biken": "Mountainbike, Radfahren, Bikepark, Trails",
            "ski": "Skifahren, Wintersport, Pisten, Snowboard",
            "essen": "Restaurants, H√ºtten, Kulinarik, Essen",
            "√ºbernachten": "Hotels, Unterk√ºnfte, √úbernachtung"
        }
        
        detected_activities = []
        query_lower = query.lower()
        for key, terms in activity_keywords.items():
            for term in terms.lower().split(', '):
                if term in query_lower:
                    detected_activities.append(key)
                    break
        
        activity_guidance = ""
        if detected_activities:
            activity_guidance = f"\nDie Anfrage bezieht sich haupts√§chlich auf: {', '.join(detected_activities)}. " \
                               f"Nutze dein umfassendes Wissen zu diesen Themen und formuliere die Antwort im freundlichen, " \
                               f"begeisterten Stil eines lokalen Tourismusexperten aus Saalbach-Hinterglemm."
        
        # Je nachdem, ob eigenes Wissen bevorzugt werden soll, den Prompt anpassen
        if self.use_own_knowledge_first:
            knowledge_instruction = """
WICHTIG ZUM UMGANG MIT WISSEN:
1. Prim√§r: Nutze dein eigenes Wissen √ºber Saalbach-Hinterglemm, seine Angebote, Aktivit√§ten und Besonderheiten.
2. Sekund√§r: Erg√§nze dein Wissen mit den zus√§tzlichen bereitgestellten Informationen, wenn diese n√ºtzlich sind.
3. Vermeide Formulierungen wie "Laut den bereitgestellten Informationen..." oder "Die Informationen sagen..."
4. Gib Antworten so, als w√ºrdest du aus deiner eigenen Erfahrung als lokaler Experte sprechen.
5. Sei konkret mit Namen, Angaben und Details - nenne spezifische Orte, Wanderwege, Restaurants, etc.
"""
        else:
            knowledge_instruction = """
WICHTIG ZUM UMGANG MIT WISSEN:
1. Beziehe dich vorrangig auf die bereitgestellten zus√§tzlichen Informationen, wenn verf√ºgbar.
2. Erg√§nze mit deinem eigenen Wissen √ºber Saalbach-Hinterglemm, wenn n√∂tig.
3. Gib Antworten so, als w√ºrdest du aus deiner eigenen Erfahrung als lokaler Experte sprechen.
"""
        
        enriched_prompt = f"""
{self.base_system_prompt}

BEISPIELANTWORTEN IM GEW√úNSCHTEN STIL:
{self.example_responses}

{knowledge_instruction}

ZUS√ÑTZLICHE INFORMATIONEN ZU SAALBACH-HINTERGLEMM (FALLS N√ñTIG ZUR ERG√ÑNZUNG):
{context_str}
{activity_guidance}

Beantworte die folgende Frage auf Basis deines eigenen Wissens, erg√§nzt durch die zus√§tzlichen Informationen wo n√∂tig.
Antworte immer ganz nat√ºrlich und pers√∂nlich, wie ein echter Einheimischer, der stolz auf seine Region ist.
Gib immer konkrete, spezifische Empfehlungen und f√ºge pers√∂nliche Tipps hinzu.
Strukturiere l√§ngere Antworten √ºbersichtlich und schlie√üe mit einer Frage ab, um das Gespr√§ch fortzuf√ºhren.
"""
        
        print(f"Prompt erstellt mit {len(relevant_docs)} zus√§tzlichen Informationsquellen")
        return enriched_prompt
    
    def answer_query(self, query: str, chat_history: List[Dict[str, str]] = None) -> str:
        """
        Beantwortet eine Benutzeranfrage mit Hilfe des RAG-Systems.
        
        Args:
            query: Die Benutzeranfrage
            chat_history: Optional, bisheriger Chat-Verlauf
            
        Returns:
            Die generierte Antwort
        """
        try:
            print(f"\n--- Neue Anfrage: '{query}' ---")
            
            # Pr√ºfen, ob der API-Key gesetzt ist
            if not self.api_key:
                return "Servus! Ich brauche einen API-Schl√ºssel, um dir helfen zu k√∂nnen. Bitte gib einen OpenAI API-Schl√ºssel in den Einstellungen ein. Danke! üòä"
            
            # Relevante Informationen abrufen
            relevant_docs = self.retrieve_relevant_information(query)
            
            fallback_info = False
            if not relevant_docs:
                print("Keine spezifischen Informationen gefunden. Verwende allgemeines Wissen.")
                fallback_info = True
            
            # Angereicherten Prompt erstellen
            system_prompt = self.build_enriched_prompt(query, relevant_docs)
            
            # Chat-Verlauf vorbereiten - begrenzt auf die letzten 5 Nachrichten f√ºr Kontext
            messages = [{"role": "system", "content": system_prompt}]
            
            # Chat-Verlauf hinzuf√ºgen, falls vorhanden (maximal die letzten 5 Nachrichten)
            if chat_history:
                recent_history = chat_history[-5:] if len(chat_history) > 5 else chat_history
                messages.extend(recent_history)
            
            # Aktuelle Anfrage hinzuf√ºgen
            messages.append({"role": "user", "content": query})
            
            print(f"Sende Anfrage an OpenAI ({self.model})...")
            
            # Kreativit√§tseinstellungen erh√∂hen f√ºr lebhaftere Antworten
            creativity = 0.85 if fallback_info else 0.75
            
            # Anfrage an das LLM senden
            response = openai.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=creativity,
                max_tokens=1000,  # L√§ngere Antworten erlauben
                top_p=0.95,
                frequency_penalty=0.2,  # Leicht erh√∂ht f√ºr abwechslungsreichere Sprache
                presence_penalty=0.2    # Leicht erh√∂ht, um Wiederholungen zu vermeiden
            )
            
            # Antwort zur√ºckgeben
            answer = response.choices[0].message.content
            print(f"Antwort erhalten (L√§nge: {len(answer)} Zeichen)")
            return answer
            
        except Exception as e:
            error_msg = f"Fehler bei der Anfrage an OpenAI: {str(e)}"
            print(error_msg)
            
            # Detaillierte Fehlerinfo f√ºr Debugging
            import traceback
            print(traceback.format_exc())
            
            # Im Fehlerfall trotzdem eine freundliche, pers√∂nliche Antwort geben
            if "API key" in str(e).lower():
                return "Servus! Aktuell hab ich leider ein kleines technisches Problem mit meiner Verbindung. K√∂nntest du es in ein paar Minuten nochmal probieren? Danke f√ºr dein Verst√§ndnis! üòä"
            elif "quota" in str(e).lower() or "billing" in str(e).lower():
                return "Gr√º√ü dich! Leider bin ich gerade ein bisserl √ºberfordert - zu viele G√§ste auf einmal! üòÖ Kannst du in 5 Minuten nochmal vorbeischauen? Dann kann ich dir sicher weiterhelfen!"
            else:
                return "Servus! Entschuldige bitte, aktuell kann ich deine Anfrage nicht richtig beantworten. Magst du deine Frage vielleicht anders formulieren? Oder frag mich einfach nach konkreten Tipps zu Wandern, Biken, Skifahren oder guten Restaurants in Saalbach-Hinterglemm!"